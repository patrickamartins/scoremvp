declare module 'lodash' {
  export function groupBy<T>(collection: T[], iteratee?: string | ((value: T) => string)): { [key: string]: T[] };
  export function orderBy<T>(collection: T[], iteratees?: string | string[] | ((value: T) => any), orders?: string | string[]): T[];
  export function uniq<T>(array: T[]): T[];
  export function sum(array: number[]): number;
  export function mean(array: number[]): number;
  export function round(number: number, precision?: number): number;
  export function get(object: any, path: string | string[], defaultValue?: any): any;
  export function set(object: any, path: string | string[], value: any): any;
  export function cloneDeep<T>(value: T): T;
  export function debounce<T extends (...args: any[]) => any>(func: T, wait?: number, options?: { leading?: boolean; maxWait?: number; trailing?: boolean }): T;
  export function throttle<T extends (...args: any[]) => any>(func: T, wait?: number, options?: { leading?: boolean; trailing?: boolean }): T;
  export function isEqual(value: any, other: any): boolean;
  export function isEmpty(value: any): boolean;
  export function isNil(value: any): boolean;
  export function isNumber(value: any): boolean;
  export function isString(value: any): boolean;
  export function isObject(value: any): boolean;
  export function isArray(value: any): boolean;
  export function isFunction(value: any): boolean;
  export function isDate(value: any): boolean;
  export function isBoolean(value: any): boolean;
  export function isNull(value: any): boolean;
  export function isUndefined(value: any): boolean;
  export function isNaN(value: any): boolean;
  export function isFinite(value: any): boolean;
  export function isInteger(value: any): boolean;
  export function isSafeInteger(value: any): boolean;
  export function isLength(value: any): boolean;
  export function isArrayLike(value: any): boolean;
  export function isArrayLikeObject(value: any): boolean;
  export function isBuffer(value: any): boolean;
  export function isElement(value: any): boolean;
  export function isError(value: any): boolean;
  export function isMap(value: any): boolean;
  export function isSet(value: any): boolean;
  export function isSymbol(value: any): boolean;
  export function isTypedArray(value: any): boolean;
  export function isWeakMap(value: any): boolean;
  export function isWeakSet(value: any): boolean;
  export function isRegExp(value: any): boolean;
  export function isMatch(object: any, source: any): boolean;
  export function isMatchWith(object: any, source: any, customizer?: (value: any, other: any, indexOrKey: number | string, object: any, source: any) => boolean): boolean;
  export function isNative(value: any): boolean;
  export function isPlainObject(value: any): boolean;
  export function isPromise(value: any): boolean;
  export function isSealed(value: any): boolean;
  export function isExtensible(value: any): boolean;
  export function isFrozen(value: any): boolean;
  export function isArguments(value: any): boolean;
  export function isArrayBuffer(value: any): boolean;
  export function isDataView(value: any): boolean;
  export function isDate(value: any): boolean;
  export function isElement(value: any): boolean;
  export function isError(value: any): boolean;
  export function isFinite(value: any): boolean;
  export function isFunction(value: any): boolean;
  export function isInteger(value: any): boolean;
  export function isLength(value: any): boolean;
  export function isMap(value: any): boolean;
  export function isMatch(object: any, source: any): boolean;
  export function isMatchWith(object: any, source: any, customizer?: (value: any, other: any, indexOrKey: number | string, object: any, source: any) => boolean): boolean;
  export function isNaN(value: any): boolean;
  export function isNative(value: any): boolean;
  export function isNil(value: any): boolean;
  export function isNull(value: any): boolean;
  export function isNumber(value: any): boolean;
  export function isObject(value: any): boolean;
  export function isObjectLike(value: any): boolean;
  export function isPlainObject(value: any): boolean;
  export function isRegExp(value: any): boolean;
  export function isSafeInteger(value: any): boolean;
  export function isSet(value: any): boolean;
  export function isString(value: any): boolean;
  export function isSymbol(value: any): boolean;
  export function isTypedArray(value: any): boolean;
  export function isUndefined(value: any): boolean;
  export function isWeakMap(value: any): boolean;
  export function isWeakSet(value: any): boolean;
  export function toArray(value: any): any[];
  export function toFinite(value: any): number;
  export function toInteger(value: any): number;
  export function toLength(value: any): number;
  export function toNumber(value: any): number;
  export function toPlainObject(value: any): object;
  export function toSafeInteger(value: any): number;
  export function toString(value: any): string;
  export function toUpper(value: string): string;
  export function toLower(value: string): string;
  export function trim(value: string, chars?: string): string;
  export function trimStart(value: string, chars?: string): string;
  export function trimEnd(value: string, chars?: string): string;
  export function truncate(value: string, options?: { length?: number; omission?: string; separator?: string | RegExp }): string;
  export function unescape(value: string): string;
  export function upperCase(value: string): string;
  export function upperFirst(value: string): string;
  export function words(value: string, pattern?: string | RegExp): string[];
  export function wrap(value: any, wrapper: Function): Function;
  export function xor(...arrays: any[][]): any[];
  export function xorBy(...arrays: any[][]): any[];
  export function xorWith(...arrays: any[][]): any[];
  export function zip(...arrays: any[][]): any[][];
  export function zipObject(props: string[], values: any[]): object;
  export function zipObjectDeep(props: string[], values: any[]): object;
  export function zipWith(...arrays: any[][]): any[];
  export function countBy(collection: any, iteratee?: string | Function): object;
  export function each(collection: any, iteratee?: Function): any;
  export function eachRight(collection: any, iteratee?: Function): any;
  export function every(collection: any, predicate?: string | object | Function): boolean;
  export function filter(collection: any, predicate?: string | object | Function): any[];
  export function find(collection: any, predicate?: string | object | Function, fromIndex?: number): any;
  export function findLast(collection: any, predicate?: string | object | Function, fromIndex?: number): any;
  export function flatMap(collection: any, iteratee?: Function): any[];
  export function flatMapDeep(collection: any, iteratee?: Function): any[];
  export function flatMapDepth(collection: any, iteratee?: Function, depth?: number): any[];
  export function forEach(collection: any, iteratee?: Function): any;
  export function forEachRight(collection: any, iteratee?: Function): any;
  export function includes(collection: any, value: any, fromIndex?: number): boolean;
  export function invokeMap(collection: any, path: string | Function, ...args: any[]): any[];
  export function keyBy(collection: any, iteratee?: string | Function): object;
  export function map(collection: any, iteratee?: string | object | Function): any[];
  export function orderBy(collection: any, iteratees?: string | string[] | Function, orders?: string | string[]): any[];
  export function partition(collection: any, predicate?: string | object | Function): [any[], any[]];
  export function reduce(collection: any, iteratee?: Function, accumulator?: any): any;
  export function reduceRight(collection: any, iteratee?: Function, accumulator?: any): any;
  export function reject(collection: any, predicate?: string | object | Function): any[];
  export function sample(collection: any): any;
  export function sampleSize(collection: any, n?: number): any[];
  export function shuffle(collection: any): any[];
  export function size(collection: any): number;
  export function some(collection: any, predicate?: string | object | Function): boolean;
  export function sortBy(collection: any, iteratees?: string | string[] | Function): any[];
  export function defer(func: Function, ...args: any[]): number;
  export function delay(func: Function, wait: number, ...args: any[]): number;
  export function once(func: Function): Function;
  export function overArgs(func: Function, transforms: Function[]): Function;
  export function partial(func: Function, ...args: any[]): Function;
  export function partialRight(func: Function, ...args: any[]): Function;
  export function rearg(func: Function, ...indexes: number[]): Function;
  export function rest(func: Function, start?: number): Function;
  export function spread(func: Function, start?: number): Function;
  export function throttle(func: Function, wait?: number, options?: { leading?: boolean; trailing?: boolean }): Function;
  export function unary(func: Function): Function;
  export function wrap(value: any, wrapper: Function): Function;
  export function castArray(value: any): any[];
  export function clone(value: any): any;
  export function cloneDeep(value: any): any;
  export function cloneDeepWith(value: any, customizer?: Function): any;
  export function cloneWith(value: any, customizer?: Function): any;
  export function conformsTo(object: any, source: any): boolean;
  export function eq(value: any, other: any): boolean;
  export function gt(value: any, other: any): boolean;
  export function gte(value: any, other: any): boolean;
  export function isArguments(value: any): boolean;
  export function isArray(value: any): boolean;
  export function isArrayBuffer(value: any): boolean;
  export function isArrayLike(value: any): boolean;
  export function isArrayLikeObject(value: any): boolean;
  export function isBoolean(value: any): boolean;
  export function isBuffer(value: any): boolean;
  export function isDate(value: any): boolean;
  export function isElement(value: any): boolean;
  export function isEmpty(value: any): boolean;
  export function isEqual(value: any, other: any): boolean;
  export function isEqualWith(value: any, other: any, customizer?: Function): boolean;
  export function isError(value: any): boolean;
  export function isFinite(value: any): boolean;
  export function isFunction(value: any): boolean;
  export function isInteger(value: any): boolean;
  export function isLength(value: any): boolean;
  export function isMap(value: any): boolean;
  export function isMatch(object: any, source: any): boolean;
  export function isMatchWith(object: any, source: any, customizer?: Function): boolean;
  export function isNaN(value: any): boolean;
  export function isNative(value: any): boolean;
  export function isNil(value: any): boolean;
  export function isNull(value: any): boolean;
  export function isNumber(value: any): boolean;
  export function isObject(value: any): boolean;
  export function isObjectLike(value: any): boolean;
  export function isPlainObject(value: any): boolean;
  export function isRegExp(value: any): boolean;
  export function isSafeInteger(value: any): boolean;
  export function isSet(value: any): boolean;
  export function isString(value: any): boolean;
  export function isSymbol(value: any): boolean;
  export function isTypedArray(value: any): boolean;
  export function isUndefined(value: any): boolean;
  export function isWeakMap(value: any): boolean;
  export function isWeakSet(value: any): boolean;
  export function lt(value: any, other: any): boolean;
  export function lte(value: any, other: any): boolean;
  export function toArray(value: any): any[];
  export function toFinite(value: any): number;
  export function toInteger(value: any): number;
  export function toLength(value: any): number;
  export function toNumber(value: any): number;
  export function toPlainObject(value: any): object;
  export function toSafeInteger(value: any): number;
  export function toString(value: any): string;
  export function add(augend: number, addend: number): number;
  export function ceil(number: number, precision?: number): number;
  export function divide(dividend: number, divisor: number): number;
  export function floor(number: number, precision?: number): number;
  export function max(array: number[]): number;
  export function maxBy(array: any[], iteratee?: string | Function): any;
  export function mean(array: number[]): number;
  export function meanBy(array: any[], iteratee?: string | Function): number;
  export function min(array: number[]): number;
  export function minBy(array: any[], iteratee?: string | Function): any;
  export function multiply(multiplier: number, multiplicand: number): number;
  export function round(number: number, precision?: number): number;
  export function subtract(minuend: number, subtrahend: number): number;
  export function sum(array: number[]): number;
  export function sumBy(array: any[], iteratee?: string | Function): number;
  export function clamp(number: number, lower: number, upper: number): number;
  export function inRange(number: number, start: number, end: number): boolean;
  export function random(lower: number, upper: number, floating?: boolean): number;
  export function assign(object: object, ...sources: object[]): object;
  export function assignIn(object: object, ...sources: object[]): object;
  export function assignInWith(object: object, source: object, customizer?: Function): object;
  export function assignWith(object: object, source: object, customizer?: Function): object;
  export function at(object: object, ...paths: string[]): any[];
  export function create(prototype: object, properties?: object): object;
  export function defaults(object: object, ...sources: object[]): object;
  export function defaultsDeep(object: object, ...sources: object[]): object;
  export function entries(object: object): [string, any][];
  export function entriesIn(object: object): [string, any][];
  export function extend(object: object, ...sources: object[]): object;
  export function extendWith(object: object, source: object, customizer?: Function): object;
  export function findKey(object: object, predicate?: string | object | Function): string | undefined;
  export function findLastKey(object: object, predicate?: string | object | Function): string | undefined;
  export function forIn(object: object, iteratee?: Function): object;
  export function forInRight(object: object, iteratee?: Function): object;
  export function forOwn(object: object, iteratee?: Function): object;
  export function forOwnRight(object: object, iteratee?: Function): object;
  export function functions(object: object): string[];
  export function functionsIn(object: object): string[];
  export function get(object: object, path: string | string[], defaultValue?: any): any;
  export function has(object: object, path: string | string[]): boolean;
  export function hasIn(object: object, path: string | string[]): boolean;
  export function invert(object: object): object;
  export function invertBy(object: object, iteratee?: Function): object;
  export function invoke(object: object, path: string | string[], ...args: any[]): any;
  export function keys(object: object): string[];
  export function keysIn(object: object): string[];
  export function mapKeys(object: object, iteratee?: Function): object;
  export function mapValues(object: object, iteratee?: Function): object;
  export function merge(object: object, ...sources: object[]): object;
  export function mergeWith(object: object, source: object, customizer?: Function): object;
  export function omit(object: object, ...paths: string[]): object;
  export function omitBy(object: object, predicate?: Function): object;
  export function pick(object: object, ...paths: string[]): object;
  export function pickBy(object: object, predicate?: Function): object;
  export function result(object: object, path: string | string[], defaultValue?: any): any;
  export function set(object: object, path: string | string[], value: any): object;
  export function setWith(object: object, path: string | string[], value: any, customizer?: Function): object;
  export function toPairs(object: object): [string, any][];
  export function toPairsIn(object: object): [string, any][];
  export function transform(object: object, iteratee?: Function, accumulator?: any): any;
  export function unset(object: object, path: string | string[]): boolean;
  export function update(object: object, path: string | string[], updater: Function): object;
  export function updateWith(object: object, path: string | string[], updater: Function, customizer?: Function): object;
  export function values(object: object): any[];
  export function valuesIn(object: object): any[];
  export function camelCase(string: string): string;
  export function capitalize(string: string): string;
  export function deburr(string: string): string;
  export function endsWith(string: string, target: string, position?: number): boolean;
  export function escape(string: string): string;
  export function escapeRegExp(string: string): string;
  export function kebabCase(string: string): string;
  export function lowerCase(string: string): string;
  export function lowerFirst(string: string): string;
  export function pad(string: string, length?: number, chars?: string): string;
  export function padEnd(string: string, length?: number, chars?: string): string;
  export function padStart(string: string, length?: number, chars?: string): string;
  export function parseInt(string: string, radix?: number): number;
  export function repeat(string: string, n?: number): string;
  export function replace(string: string, pattern: string | RegExp, replacement: string | Function): string;
  export function snakeCase(string: string): string;
  export function split(string: string, separator: string | RegExp, limit?: number): string[];
  export function startCase(string: string): string;
  export function startsWith(string: string, target: string, position?: number): boolean;
  export function template(string: string, options?: object): Function;
  export function toLower(string: string): string;
  export function toUpper(string: string): string;
  export function trim(string: string, chars?: string): string;
  export function trimEnd(string: string, chars?: string): string;
  export function trimStart(string: string, chars?: string): string;
  export function truncate(string: string, options?: { length?: number; omission?: string; separator?: string | RegExp }): string;
  export function unescape(string: string): string;
  export function upperCase(string: string): string;
  export function upperFirst(string: string): string;
  export function words(string: string, pattern?: string | RegExp): string[];
  export function attempt(func: Function, ...args: any[]): any;
  export function bindAll(object: object, ...methodNames: string[]): object;
  export function cond(pairs: [Function, Function][]): Function;
  export function conforms(source: object): Function;
  export function constant(value: any): Function;
  export function defaultTo(value: any, defaultValue: any): any;
  export function flow(...funcs: Function[]): Function;
  export function flowRight(...funcs: Function[]): Function;
  export function identity(value: any): any;
  export function iteratee(func?: string | object | Function): Function;
  export function matches(source: object): Function;
  export function matchesProperty(path: string | string[], srcValue: any): Function;
  export function method(path: string | string[], ...args: any[]): Function;
  export function methodOf(object: object, ...args: any[]): Function;
  export function mixin(object: object, source: object, options?: { chain?: boolean }): object;
  export function noConflict(): any;
  export function noop(): void;
  export function nthArg(n?: number): Function;
  export function over(...iteratees: Function[]): Function;
  export function overEvery(...predicates: Function[]): Function;
  export function overSome(...predicates: Function[]): Function;
  export function property(path: string | string[]): Function;
  export function propertyOf(object: object): Function;
  export function range(start?: number, end?: number, step?: number): number[];
  export function rangeRight(start?: number, end?: number, step?: number): number[];
  export function runInContext(context: object): Function;
  export function stubArray(): any[];
  export function stubFalse(): boolean;
  export function stubObject(): object;
  export function stubString(): string;
  export function stubTrue(): boolean;
  export function times(n: number, iteratee?: Function): any[];
  export function toPath(value: any): string[];
  export function uniqueId(prefix?: string): string;
} 